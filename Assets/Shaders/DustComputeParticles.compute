#pragma kernel Init
#pragma kernel Spawn
#pragma kernel Update

#include "DustParticleSystemCommon.cginc"
#include "NoiseSimplex.cginc"

#define thread_group_size_x 16
#define thread_group_size_y 16

Texture2D<float> _sizeOverLife;
Texture2D<float4> _colorOverLife;
Texture2D<float4> _colorOverVelocity;
RWStructuredBuffer<DustMesh> _emissionMesh;
RWStructuredBuffer<int> _emissionMeshTris;
RWStructuredBuffer<DustParticle> _particles;
RWStructuredBuffer<int> _kernelArgs;
AppendStructuredBuffer<uint> _deadList;
ConsumeStructuredBuffer<uint> _particlePool;

SamplerState sampler_colorOverLife;

float dt;
float fixedTime; //seconds
float3 origin;
float2 massNew;
float2 momentumNew;
float2 lifespanNew;

float inheritVelocityMult;
float3 initialVelocityDir;
float3 gravityIn;
float gravityModifier;
float jitter;
float randomizeDirection;
float randomizeRotation;
bool alignToInitialDirection;

int emissionShape;
int emission;
float initialSpeed;
float3 emissionSize;
float scatterVolume;

bool sizeOverLifeToggle;

bool alignToDirection;
float3 rotationOverLifetime;

float4 startColor;
bool colorOverLifeToggle;
bool colorOverVelocityToggle;
float velocityColorRange;
float randomizeColor;
bool useMeshEmitterColor;

bool noiseToggle;
int noiseType;
float3 noiseAmplitude;
float3 noiseScale;
float4 noiseOffset;
float4 noiseOffsetSpeed;

float4x4 emissionMeshMatrix;
float4x4 emissionMeshMatrixInvT;
int emissionMeshVertCount;
int emissionMeshTrisCount;

const float cellSize = 1.25;

[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + id.y * thread_group_size_x * _kernelArgs[0];
    _particles[idx].active = false;
    _deadList.Append(idx);
}

[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void Spawn(uint3 id : SV_DispatchThreadID)
{
	uint idx = _particlePool.Consume();
	DustParticle p = _particles[idx];
	p.active = true;

	// Randomness
	float r1 = rand(float2(id.x+.1, id.y));
	float r2 = rand(float2(id.x+.2, id.y));
	float r3 = rand(float2(id.x+0, id.y));
	float r4 = rand(float2(id.x+fixedTime, id.y+fixedTime));
	float r5 = rand(float2(id.x+fixedTime+.1, id.y+fixedTime+.2));
	float r6 = rand(float2(id.x+fixedTime+.3, id.y+fixedTime+.4));
	float r7 = rand(float2(id.x+fixedTime+.5, id.y+fixedTime+.6));
	float3 randSphere = randomSpherePoint(float3(r4,r5,r6), scatterVolume);

	float newLifespan = fit(rand(float2(id.x+.6, id.y)), 0., 1., lifespanNew.x, lifespanNew.y) * 2.; //*2 puts it into seconds
	p.age = newLifespan;

	p.lifespan = newLifespan;
	p.mass = fit(rand(float2(id.x+.7, id.y)), 0., 1., massNew.x, massNew.y);
	p.momentum = fit(rand(float2(id.x+.8, id.y)), 0., 1., momentumNew.x, momentumNew.y);

	[call] switch(emissionShape) 
	{
		// Procedural sphere
		case 0:
			p.vel = randSphere * initialSpeed * p.mass * dt;
			
			p.pos = origin.xyz + (randSphere * emissionSize);
			p.pos += p.vel * r1 * jitter;

			p.startColor = startColor;
			break;

		// Mesh emission
		case 1:
			// Pick a random index into triangle buffer that's divisible by 3
			int randId = int(round(floor(r4 * emissionMeshTrisCount) / 3.) * 3.);

			// Get the 3 id's that make up that triangle and generate a random point between them
			int3 tris = int3(_emissionMeshTris[randId+0], _emissionMeshTris[randId+1], _emissionMeshTris[randId+2]);
			float3 a = _emissionMesh[tris.x].pos;
			float3 b = _emissionMesh[tris.y].pos;
			float3 c = _emissionMesh[tris.z].pos;
			p.pos = bayesianCoordinate(a, b, c, float2(r1,r2));
			
			// Velocity direction is the first vertex in the triangle...lazy
			float3 dir = _emissionMesh[tris.x].normal;
			dir = normalize(mul(emissionMeshMatrixInvT, float4(dir, 1.)).xyz + float3(1e-6,0,0));
			dir = lerp(dir, normalize(dir + randSphere), randomizeDirection);
			dir += float3(1e-3,0,0); //guard against /0 later
			p.vel = dir * initialSpeed * p.mass * dt;

			// Jitter
			p.pos += dir * dt * r1 * jitter;
			p.pos = mul(emissionMeshMatrix, float4(p.pos, 1.)).xyz;

			if (useMeshEmitterColor) {
				p.startColor = float4(_emissionMesh[tris.x].cd, 1) * startColor;
			}
			else p.startColor = startColor;
			break;
	}

	// inherit velocity from parent
	p.vel += initialVelocityDir * inheritVelocityMult *  dt;

	p.startColor *= lerp(float4(1,1,1,1), float4(r5,r6,r7,1.), randomizeColor);

	p.rot = IDENTITY4x4;
	if (alignToInitialDirection) {
		if (length(p.vel) > SMALLFLOAT) {
			p.rot = rotateToVector(p.vel);
		}
	}
	
	if (randomizeRotation > 0.0) {
		float3 dir = (float3(r1, r2, r3) * 2.) - 1.;
		dir = lerp(float3(0,0,0), dir, randomizeRotation);
		p.rot = rotateXYZ(p.rot, dir);
	}
	
	p.scale = float3(1.,1.,1.);

	_particles[idx] = p;

}


[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	int idx = id.x + id.y * thread_group_size_x * _kernelArgs[0];

	DustParticle p = _particles[idx];

	// Randomness
	float r1 = rand(float2(id.x+.1, id.y));
	float r2 = rand(float2(id.x+.2, id.y));
	float r3 = rand(float2(id.x+0, id.y));
	// float r4 = rand(float2(id.x+fixedTime, id.x));
	float r4 = rand(float2(id.x+fixedTime+.3, id.y+fixedTime+.4));
	float3 randSphere = randomSpherePoint(float3(r1,r2,r3), scatterVolume);

	// Sim
	// Noise
	float3 simplexNoise = float3(0,0,0);
	if (noiseToggle) {
		float4 noiseTranslate = noiseOffset + (noiseOffsetSpeed * float4(fixedTime,fixedTime,fixedTime,fixedTime));
		float4 noiseCoord = float4(p.pos * noiseScale, 1) + noiseTranslate;
		[call] switch(noiseType) {
			case 0:
				simplexNoise.xy = float2(snoise(noiseCoord.xy), snoise(noiseCoord.xy + 17.0));
				break;
			case 1:
				simplexNoise.xyz = float3(snoise(noiseCoord.xyz), snoise(noiseCoord.xyz + 17.0), snoise(noiseCoord.xyz + 43.0));
				break;
			case 2:
				simplexNoise = float3(snoise(noiseCoord), snoise(noiseCoord + 17.0), snoise(noiseCoord + 43.0));
				break;
		}
		simplexNoise *= noiseAmplitude;
	}
	
	float2 ageCoord = float2(fit(p.age, 0., p.lifespan, 1., 0.), 0.5);
	
	// Velocity
	float3 gravity = gravityIn * gravityModifier * dt;
	float3 velForces = simplexNoise + gravity;
	p.vel = (velForces * p.mass * dt) + p.vel * p.momentum;
	p.pos += p.vel;
	
	// Color
	float speed = length(p.vel);
	float4 cdLife = float4(1,1,1,1);
	float4 cdVel = float4(1,1,1,1);
	if (colorOverLifeToggle) {
		cdLife = _colorOverLife.SampleLevel(sampler_colorOverLife, ageCoord, 0.0);
	}
	if (colorOverVelocityToggle) {
		float2 velCoord = float2(fit(clamp(speed, 0., velocityColorRange), 0., velocityColorRange, 0., 1.), 0.5);
		cdVel = _colorOverVelocity.SampleLevel(sampler_colorOverLife, velCoord, 0.0);
	}
	p.cd = p.startColor * cdLife * cdVel;

	// Rotation and scale
	if (alignToDirection) {
		if (length(p.vel) > SMALLFLOAT) {
			p.rot = rotateToVector(p.vel);
		}
	}

	// Add rotation every step
	p.rot = rotateXYZ(p.rot, rotationOverLifetime * dt);

	if (sizeOverLifeToggle) {
		p.scale = _sizeOverLife.SampleLevel(sampler_colorOverLife, ageCoord, 0.0).r;
	}
	
	// Age
	p.age -= dt;
	if (p.age <= 0.0) {
		p.active = false;
		_deadList.Append(idx);
	}


	_particles[idx] = p;


}